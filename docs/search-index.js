var searchIndex = JSON.parse('{\
"either":{"doc":"The enum [`Either`] with variants `Left` and `Right` is a…","i":[[4,"Either","either","The enum `Either` with variants `Left` and `Right` is a…",null,null],[13,"Left","","A value of type `L`.",0,null],[13,"Right","","A value of type `R`.",0,null],[11,"is_left","","Return true if the value is the `Left` variant.",0,[[]]],[11,"is_right","","Return true if the value is the `Right` variant.",0,[[]]],[11,"left","","Convert the left side of `Either<L, R>` to an `Option<L>`.",0,[[],["option",4]]],[11,"right","","Convert the right side of `Either<L, R>` to an `Option<R>`.",0,[[],["option",4]]],[11,"as_ref","","Convert `&Either<L, R>` to `Either<&L, &R>`.",0,[[],["either",4]]],[11,"as_mut","","Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.",0,[[],["either",4]]],[11,"flip","","Convert `Either<L, R>` to `Either<R, L>`.",0,[[],["either",4]]],[11,"map_left","","Apply the function `f` on the value in the `Left` variant…",0,[[],["either",4]]],[11,"map_right","","Apply the function `f` on the value in the `Right` variant…",0,[[],["either",4]]],[11,"either","","Apply one of two functions depending on contents, unifying…",0,[[]]],[11,"either_with","","Like `either`, but provide some context to whichever of…",0,[[]]],[11,"left_and_then","","Apply the function `f` on the value in the `Left` variant…",0,[[],["either",4]]],[11,"right_and_then","","Apply the function `f` on the value in the `Right` variant…",0,[[],["either",4]]],[11,"into_iter","","Convert the inner value to an iterator.",0,[[],["either",4]]],[11,"left_or","","Return left value or given value",0,[[]]],[11,"left_or_default","","Return left or a default",0,[[]]],[11,"left_or_else","","Returns left value or computes it from a closure",0,[[]]],[11,"right_or","","Return right value or given value",0,[[]]],[11,"right_or_default","","Return right or a default",0,[[]]],[11,"right_or_else","","Returns right value or computes it from a closure",0,[[]]],[11,"factor_first","","Factor out a homogeneous type from an either of pairs.",0,[[]]],[11,"factor_second","","Factor out a homogeneous type from an either of pairs.",0,[[]]],[11,"into_inner","","Extract the value of an either over two equivalent types.",0,[[]]],[11,"map","","Map `f` over the contained value and return the result in…",0,[[],["either",4]]],[14,"try_left","","Macro for unwrapping the left side of an `Either`, which…",null,null],[14,"try_right","","Dual to `try_left!`, see its documentation for more…",null,null],[11,"from","","",0,[[]]],[11,"into_iter","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"deref","","",0,[[]]],[11,"deref_mut","","",0,[[]]],[11,"from","","",0,[[["result",4]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"eq","","",0,[[["either",4]]]],[11,"ne","","",0,[[["either",4]]]],[11,"cmp","","",0,[[["either",4]],["ordering",4]]],[11,"partial_cmp","","",0,[[["either",4]],[["option",4],["ordering",4]]]],[11,"lt","","",0,[[["either",4]]]],[11,"le","","",0,[[["either",4]]]],[11,"gt","","",0,[[["either",4]]]],[11,"ge","","",0,[[["either",4]]]],[11,"hash","","",0,[[]]],[11,"next","","",0,[[],["option",4]]],[11,"size_hint","","",0,[[]]],[11,"fold","","",0,[[]]],[11,"count","","",0,[[]]],[11,"last","","",0,[[],["option",4]]],[11,"nth","","",0,[[],["option",4]]],[11,"collect","","",0,[[]]],[11,"all","","",0,[[]]],[11,"next_back","","",0,[[],["option",4]]],[11,"extend","","",0,[[]]],[11,"as_ref","","",0,[[]]],[11,"as_ref","","",0,[[]]],[11,"as_ref","","",0,[[]]],[11,"as_mut","","",0,[[]]],[11,"as_mut","","",0,[[]]],[11,"as_mut","","",0,[[]]],[11,"into","","",0,[[],["result",4]]],[11,"clone","","",0,[[],["either",4]]]],"p":[[4,"Either"]]},\
"itertools":{"doc":"Extra iterator adaptors, functions and macros.","i":[[4,"Either","itertools","The enum `Either` with variants `Left` and `Right` is a…",null,null],[13,"Left","","A value of type `L`.",0,null],[13,"Right","","A value of type `R`.",0,null],[4,"Diff","","A type returned by the `diff_with` function.",null,null],[13,"FirstMismatch","","The index of the first non-matching element along with…",1,null],[13,"Shorter","","The total number of elements that were in `J` along with…",1,null],[13,"Longer","","The total number of elements that were in `I` along with…",1,null],[4,"MinMaxResult","","`MinMaxResult` is an enum returned by `minmax`. See…",null,null],[13,"NoElements","","Empty iterator",2,null],[13,"OneElement","","Iterator with one element, so the minimum and maximum are…",2,null],[13,"MinMax","","More than one element in the iterator, the first element…",2,null],[4,"Position","","A value yielded by `WithPosition`. Indicates the position…",null,null],[13,"First","","This is the first element.",3,null],[13,"Middle","","This is neither the first nor the last element.",3,null],[13,"Last","","This is the last element.",3,null],[13,"Only","","This is the only element.",3,null],[4,"EitherOrBoth","","Value that either holds a single A or B, or both.",null,null],[13,"Both","","Both values are present.",4,null],[13,"Left","","Only the left value of type `A` is present.",4,null],[13,"Right","","Only the right value of type `B` is present.",4,null],[4,"FoldWhile","","An enum used for controlling the execution of…",null,null],[13,"Continue","","Continue folding with this value",5,null],[13,"Done","","Fold is complete and will return this value",5,null],[5,"concat","","Combine all an iterator\'s elements into one element by…",null,[[]]],[5,"cons_tuples","","Create an iterator that maps for example iterators of…",null,[[],["constuples",3]]],[5,"diff_with","","Compares every element yielded by both `i` and `j` with…",null,[[],[["option",4],["diff",4]]]],[5,"kmerge_by","","Create an iterator that merges elements of the contained…",null,[[],["kmergeby",3]]],[5,"process_results","","“Lift” a function of the values of an iterator so that it…",null,[[],["result",4]]],[5,"repeat_n","","Create an iterator that produces `n` repetitions of…",null,[[],["repeatn",3]]],[5,"repeat_call","","An iterator source that produces elements indefinitely by…",null,[[],["repeatcall",3]]],[5,"unfold","","Creates a new unfold source with the specified closure as…",null,[[],["unfold",3]]],[5,"iterate","","Creates a new iterator that infinitely applies function to…",null,[[],["iterate",3]]],[5,"multizip","","An iterator that generalizes .zip() and allows running…",null,[[],["zip",3]]],[5,"interleave","","Create an iterator that interleaves elements in `i` and `j`.",null,[[],["interleave",3]]],[5,"merge","","Create an iterator that merges elements in `i` and `j`.",null,[[],["merge",3]]],[5,"put_back","","Create an iterator where you can put back a single item",null,[[],["putback",3]]],[5,"put_back_n","","Create an iterator where you can put back multiple values…",null,[[],["putbackn",3]]],[5,"multipeek","","An iterator adaptor that allows the user to peek at…",null,[[],["multipeek",3]]],[5,"kmerge","","Create an iterator that merges elements of the contained…",null,[[],["kmerge",3]]],[5,"zip_eq","","Iterate `i` and `j` in lock step.",null,[[],["zipeq",3]]],[5,"merge_join_by","","Return an iterator adaptor that merge-joins items from the…",null,[[],["mergejoinby",3]]],[5,"rciter","","Return an iterator inside a `Rc<RefCell<_>>` wrapper.",null,[[],["rciter",3]]],[5,"enumerate","","Iterate `iterable` with a running index.",null,[[],["enumerate",3]]],[5,"rev","","Iterate `iterable` in reverse.",null,[[],["rev",3]]],[5,"zip","","Iterate `i` and `j` in lock step.",null,[[],["zip",3]]],[5,"chain","","Create an iterator that first iterates `i` and then `j`.",null,[[],["chain",3]]],[5,"cloned","","Create an iterator that clones each element from &T to T",null,[[],["cloned",3]]],[5,"fold","","Perform a fold operation over the iterable.",null,[[]]],[5,"all","","Test whether the predicate holds for all elements in the…",null,[[]]],[5,"any","","Test whether the predicate holds for any elements in the…",null,[[]]],[5,"max","","Return the maximum value of the iterable.",null,[[],["option",4]]],[5,"min","","Return the minimum value of the iterable.",null,[[],["option",4]]],[5,"join","","Combine all iterator elements into one String, seperated…",null,[[],["string",3]]],[5,"sorted","","Sort all iterator elements into a new iterator in…",null,[[],["intoiter",3]]],[5,"equal","","Return `true` if both iterables produce equal sequences…",null,[[]]],[5,"assert_equal","","Assert that two iterables produce equal sequences, with…",null,[[]]],[5,"partition","","Partition a sequence using predicate `pred` so that…",null,[[]]],[0,"structs","","The concrete iterator types.",null,null],[3,"Dedup","itertools::structs","An iterator adaptor that removes repeated duplicates.",null,null],[3,"Interleave","","An iterator adaptor that alternates elements from two…",null,null],[3,"InterleaveShortest","","An iterator adaptor that alternates elements from the two…",null,null],[3,"Product","","An iterator adaptor that iterates over the cartesian…",null,null],[3,"PutBack","","An iterator adaptor that allows putting back a single item…",null,null],[3,"Batching","","A “meta iterator adaptor”. Its closure receives a…",null,null],[3,"MapInto","","An iterator adapter to apply `Into` conversion to each…",null,null],[3,"MapResults","","An iterator adapter to apply a transformation within a…",null,null],[3,"Merge","","An iterator adaptor that merges the two base iterators in…",null,null],[3,"MergeBy","","An iterator adaptor that merges the two base iterators in…",null,null],[3,"TakeWhileRef","","An iterator adaptor that borrows from a `Clone`-able…",null,null],[3,"WhileSome","","An iterator adaptor that filters `Option<A>` iterator…",null,null],[3,"Coalesce","","An iterator adaptor that may join together adjacent…",null,null],[3,"TupleCombinations","","An iterator to iterate through all combinations in a…",null,null],[3,"Positions","","An iterator adapter to get the positions of each element…",null,null],[3,"Update","","An iterator adapter to apply a mutating function to each…",null,null],[3,"Step","","An iterator adaptor that steps a number elements in the…",null,null],[3,"MultiProduct","","An iterator adaptor that iterates over the cartesian…",null,null],[3,"Combinations","","An iterator to iterate through all the `n`-length…",null,null],[3,"ConsTuples","","An iterator that maps an iterator of tuples like `((A, B),…",null,null],[3,"Format","","Format all iterator elements lazily, separated by `sep`.",null,null],[3,"FormatWith","","Format all iterator elements lazily, separated by `sep`.",null,null],[3,"IntoChunks","","`ChunkLazy` is the storage for a lazy chunking operation.",null,null],[3,"Chunk","","An iterator for the elements in a single chunk.",null,null],[3,"Chunks","","An iterator that yields the Chunk iterators.",null,null],[3,"GroupBy","","`GroupBy` is the storage for the lazy grouping operation.",null,null],[3,"Group","","An iterator for the elements in a single group.",null,null],[3,"Groups","","An iterator that yields the Group iterators.",null,null],[3,"Intersperse","","An iterator adaptor to insert a particular value between…",null,null],[3,"KMerge","","An iterator adaptor that merges an abitrary number of base…",null,null],[3,"KMergeBy","","An iterator adaptor that merges an abitrary number of base…",null,null],[3,"MergeJoinBy","","An iterator adaptor that merge-joins items from the two…",null,null],[3,"MultiPeek","","See `multipeek()` for more information.",null,null],[3,"PadUsing","","An iterator adaptor that pads a sequence to a minimum…",null,null],[3,"PeekingTakeWhile","","An iterator adaptor that takes items while a closure…",null,null],[3,"ProcessResults","","An iterator that produces only the `T` values as long as…",null,null],[3,"PutBackN","","An iterator adaptor that allows putting multiple items in…",null,null],[3,"RcIter","","A wrapper for `Rc<RefCell<I>>`, that implements the…",null,null],[12,"rciter","","The boxed iterator.",6,null],[3,"RepeatN","","An iterator that produces n repetitions of an element.",null,null],[3,"RepeatCall","","See `repeat_call` for more information.",null,null],[3,"Unfold","","See `unfold` for more information.",null,null],[12,"state","","Internal state that will be passed to the closure on the…",7,null],[3,"Iterate","","An iterator that infinitely applies function to value and…",null,null],[3,"Tee","","One half of an iterator pair where both return the same…",null,null],[3,"TupleBuffer","","An iterator over a incomplete tuple.",null,null],[3,"TupleWindows","","An iterator over all contiguous windows that produces…",null,null],[3,"Tuples","","An iterator that groups the items in tuples of a specific…",null,null],[3,"Unique","","An iterator adapter to filter out duplicate elements.",null,null],[3,"UniqueBy","","An iterator adapter to filter out duplicate elements.",null,null],[3,"WithPosition","","An iterator adaptor that wraps each element in an…",null,null],[3,"ZipEq","","An iterator which iterates two other iterators…",null,null],[3,"ZipLongest","","An iterator which iterates two other iterators…",null,null],[3,"Zip","","See `multizip` for more information.",null,null],[11,"with_value","","put back value `value` (builder method)",8,[[]]],[11,"into_parts","","Split the `PutBack` into its parts.",8,[[]]],[11,"put_back","","Put back a single value to the front of the iterator.",8,[[]]],[11,"has_left","itertools","If `Left`, or `Both`, return true, otherwise, return false.",4,[[]]],[11,"has_right","","If `Right`, or `Both`, return true, otherwise, return false.",4,[[]]],[11,"left","","If `Left`, or `Both`, return `Some` with the left value,…",4,[[],["option",4]]],[11,"right","","If `Right`, or `Both`, return `Some` with the right value,…",4,[[],["option",4]]],[11,"as_ref","","Converts from `&EitherOrBoth<A, B>` to `EitherOrBoth<&A,…",4,[[],["eitherorboth",4]]],[11,"as_mut","","Converts from `&mut EitherOrBoth<A, B>` to…",4,[[],["eitherorboth",4]]],[11,"into_option","","`into_option` creates an `Option` of type `(T, T)`. The…",2,[[],["option",4]]],[11,"reset_peek","itertools::structs","Reset the peeking “cursor”",9,[[]]],[11,"peek","","Works exactly like `.next()` with the only difference that…",9,[[],["option",4]]],[11,"put_back","","Puts x in front of the iterator. The values are yielded in…",10,[[]]],[11,"into_buffer","","Return a buffer with the produced items that was not…",11,[[],["tuplebuffer",3]]],[11,"into_inner","itertools","Return the inner value.",3,[[]]],[8,"PeekingNext","","An iterator that allows peeking at an element before…",null,null],[10,"peeking_next","","Pass a reference to the next iterator element to the…",12,[[],["option",4]]],[8,"Itertools","","An [`Iterator`] blanket implementation that provides extra…",null,null],[11,"interleave","","Alternate elements from two iterators until both have run…",13,[[],["interleave",3]]],[11,"interleave_shortest","","Alternate elements from two iterators until at least one…",13,[[],["interleaveshortest",3]]],[11,"intersperse","","An iterator adaptor to insert a particular value between…",13,[[],["intersperse",3]]],[11,"zip_longest","","Create an iterator which iterates over both this and the…",13,[[],["ziplongest",3]]],[11,"zip_eq","","Create an iterator which iterates over both this and the…",13,[[],["zipeq",3]]],[11,"batching","","A “meta iterator adaptor”. Its closure receives a…",13,[[],["batching",3]]],[11,"group_by","","Return an iterable that can group iterator elements.…",13,[[],["groupby",3]]],[11,"chunks","","Return an iterable that can chunk the iterator.",13,[[],["intochunks",3]]],[11,"tuple_windows","","Return an iterator over all contiguous windows producing…",13,[[],["tuplewindows",3]]],[11,"tuples","","Return an iterator that groups the items in tuples of a…",13,[[],["tuples",3]]],[11,"tee","","Split into an iterator pair that both yield all elements…",13,[[]]],[11,"step","","Return an iterator adaptor that steps `n` elements in the…",13,[[],["step",3]]],[11,"map_into","","Convert each item of the iterator using the `Into` trait.",13,[[],["mapinto",3]]],[11,"map_results","","Return an iterator adaptor that applies the provided…",13,[[],["mapresults",3]]],[11,"merge","","Return an iterator adaptor that merges the two base…",13,[[],["merge",3]]],[11,"merge_by","","Return an iterator adaptor that merges the two base…",13,[[],["mergeby",3]]],[11,"merge_join_by","","Create an iterator that merges items from both this and…",13,[[],["mergejoinby",3]]],[11,"kmerge","","Return an iterator adaptor that flattens an iterator of…",13,[[],["kmerge",3]]],[11,"kmerge_by","","Return an iterator adaptor that flattens an iterator of…",13,[[],["kmergeby",3]]],[11,"cartesian_product","","Return an iterator adaptor that iterates over the…",13,[[],["product",3]]],[11,"multi_cartesian_product","","Return an iterator adaptor that iterates over the…",13,[[],["multiproduct",3]]],[11,"coalesce","","Return an iterator adaptor that uses the passed-in closure…",13,[[],["coalesce",3]]],[11,"dedup","","Remove duplicates from sections of consecutive identical…",13,[[],["dedup",3]]],[11,"unique","","Return an iterator adaptor that filters out elements that…",13,[[],["unique",3]]],[11,"unique_by","","Return an iterator adaptor that filters out elements that…",13,[[],["uniqueby",3]]],[11,"peeking_take_while","","Return an iterator adaptor that borrows from this iterator…",13,[[],["peekingtakewhile",3]]],[11,"take_while_ref","","Return an iterator adaptor that borrows from a…",13,[[],["takewhileref",3]]],[11,"while_some","","Return an iterator adaptor that filters `Option<A>`…",13,[[],["whilesome",3]]],[11,"tuple_combinations","","Return an iterator adaptor that iterates over the…",13,[[],["tuplecombinations",3]]],[11,"combinations","","Return an iterator adaptor that iterates over the…",13,[[],["combinations",3]]],[11,"pad_using","","Return an iterator adaptor that pads the sequence to a…",13,[[],["padusing",3]]],[11,"with_position","","Return an iterator adaptor that wraps each element in a…",13,[[],["withposition",3]]],[11,"positions","","Return an iterator adaptor that yields the indices of all…",13,[[],["positions",3]]],[11,"update","","Return an iterator adaptor that applies a mutating…",13,[[],["update",3]]],[11,"next_tuple","","Advances the iterator and returns the next items grouped…",13,[[],["option",4]]],[11,"collect_tuple","","Collects all items from the iterator into a tuple of a…",13,[[],["option",4]]],[11,"find_position","","Find the position and value of the first element…",13,[[],["option",4]]],[11,"all_equal","","Check whether all elements compare equal.",13,[[]]],[11,"dropping","","Consume the first `n` elements from the iterator eagerly,…",13,[[]]],[11,"dropping_back","","Consume the last `n` elements from the iterator eagerly,…",13,[[]]],[11,"foreach","","Run the closure `f` eagerly on each element of the iterator.",13,[[]]],[11,"concat","","Combine all an iterator\'s elements into one element by…",13,[[]]],[11,"collect_vec","","`.collect_vec()` is simply a type specialization of…",13,[[],["vec",3]]],[11,"set_from","","Assign to each reference in `self` from the `from`…",13,[[]]],[11,"join","","Combine all iterator elements into one String, seperated…",13,[[],["string",3]]],[11,"format","","Format all iterator elements, separated by `sep`.",13,[[],["format",3]]],[11,"format_with","","Format all iterator elements, separated by `sep`.",13,[[],["formatwith",3]]],[11,"fold_results","","Fold `Result` values from an iterator.",13,[[],["result",4]]],[11,"fold_options","","Fold `Option` values from an iterator.",13,[[],["option",4]]],[11,"fold1","","Accumulator of the elements in the iterator.",13,[[],["option",4]]],[11,"tree_fold1","","Accumulate the elements in the iterator in a tree-like…",13,[[],["option",4]]],[11,"fold_while","","An iterator method that applies a function, producing a…",13,[[],["foldwhile",4]]],[11,"sorted","","Sort all iterator elements into a new iterator in…",13,[[],["intoiter",3]]],[11,"sorted_by","","Sort all iterator elements into a new iterator in…",13,[[],["intoiter",3]]],[11,"sorted_by_key","","Sort all iterator elements into a new iterator in…",13,[[],["intoiter",3]]],[11,"partition_map","","Collect all iterator elements into one of two partitions.…",13,[[]]],[11,"into_group_map","","Return a `HashMap` of keys mapped to `Vec`s of values.…",13,[[],[["hashmap",3],["vec",3]]]],[11,"minmax","","Return the minimum and maximum elements in the iterator.",13,[[],["minmaxresult",4]]],[11,"minmax_by_key","","Return the minimum and maximum element of an iterator, as…",13,[[],["minmaxresult",4]]],[11,"minmax_by","","Return the minimum and maximum element of an iterator, as…",13,[[],["minmaxresult",4]]],[11,"into_inner","","Return the value in the continue or done.",5,[[]]],[11,"is_done","","Return true if `self` is `Done`, false if it is `Continue`.",5,[[]]],[14,"iproduct","","Create an iterator over the “cartesian product” of…",null,null],[14,"izip","","Create an iterator running multiple iterators in lockstep.",null,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"into_iter","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","itertools::structs","",14,[[]]],[11,"into","","",14,[[]]],[11,"into_iter","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"into_iter","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"into_iter","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"into_iter","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"into_iter","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"into_iter","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"into_iter","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"into_iter","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"into_iter","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"into_iter","","",22,[[]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"into_iter","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"into_iter","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"into_iter","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"from","","",26,[[]]],[11,"into","","",26,[[]]],[11,"into_iter","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"into_iter","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"into_iter","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"into_iter","","",29,[[]]],[11,"to_owned","","",29,[[]]],[11,"clone_into","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"into_iter","","",30,[[]]],[11,"to_owned","","",30,[[]]],[11,"clone_into","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"into_iter","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"into_iter","","",32,[[]]],[11,"to_owned","","",32,[[]]],[11,"clone_into","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"to_owned","","",33,[[]]],[11,"clone_into","","",33,[[]]],[11,"to_string","","",33,[[],["string",3]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"from","","",34,[[]]],[11,"into","","",34,[[]]],[11,"to_string","","",34,[[],["string",3]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"from","","",35,[[]]],[11,"into","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"from","","",36,[[]]],[11,"into","","",36,[[]]],[11,"into_iter","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"from","","",37,[[]]],[11,"into","","",37,[[]]],[11,"into_iter","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"from","","",38,[[]]],[11,"into","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"from","","",39,[[]]],[11,"into","","",39,[[]]],[11,"into_iter","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"from","","",40,[[]]],[11,"into","","",40,[[]]],[11,"into_iter","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"from","","",41,[[]]],[11,"into","","",41,[[]]],[11,"into_iter","","",41,[[]]],[11,"to_owned","","",41,[[]]],[11,"clone_into","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"try_into","","",41,[[],["result",4]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"from","","",42,[[]]],[11,"into","","",42,[[]]],[11,"into_iter","","",42,[[]]],[11,"to_owned","","",42,[[]]],[11,"clone_into","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"try_into","","",42,[[],["result",4]]],[11,"borrow","","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"from","","",43,[[]]],[11,"into","","",43,[[]]],[11,"into_iter","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"try_into","","",43,[[],["result",4]]],[11,"borrow","","",43,[[]]],[11,"borrow_mut","","",43,[[]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"from","","",44,[[]]],[11,"into","","",44,[[]]],[11,"into_iter","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"try_into","","",44,[[],["result",4]]],[11,"borrow","","",44,[[]]],[11,"borrow_mut","","",44,[[]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"into_iter","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",45,[[]]],[11,"into","","",45,[[]]],[11,"into_iter","","",45,[[]]],[11,"to_owned","","",45,[[]]],[11,"clone_into","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"try_into","","",45,[[],["result",4]]],[11,"borrow","","",45,[[]]],[11,"borrow_mut","","",45,[[]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"from","","",46,[[]]],[11,"into","","",46,[[]]],[11,"into_iter","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"try_into","","",46,[[],["result",4]]],[11,"borrow","","",46,[[]]],[11,"borrow_mut","","",46,[[]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"from","","",47,[[]]],[11,"into","","",47,[[]]],[11,"into_iter","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"try_into","","",47,[[],["result",4]]],[11,"borrow","","",47,[[]]],[11,"borrow_mut","","",47,[[]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"into_iter","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"into_iter","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",48,[[]]],[11,"into","","",48,[[]]],[11,"into_iter","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"try_into","","",48,[[],["result",4]]],[11,"borrow","","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"from","","",49,[[]]],[11,"into","","",49,[[]]],[11,"into_iter","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"try_into","","",49,[[],["result",4]]],[11,"borrow","","",49,[[]]],[11,"borrow_mut","","",49,[[]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"into_iter","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",50,[[]]],[11,"into","","",50,[[]]],[11,"into_iter","","",50,[[]]],[11,"to_owned","","",50,[[]]],[11,"clone_into","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"try_into","","",50,[[],["result",4]]],[11,"borrow","","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"from","","",51,[[]]],[11,"into","","",51,[[]]],[11,"into_iter","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"try_into","","",51,[[],["result",4]]],[11,"borrow","","",51,[[]]],[11,"borrow_mut","","",51,[[]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"from","","",52,[[]]],[11,"into","","",52,[[]]],[11,"into_iter","","",52,[[]]],[11,"try_from","","",52,[[],["result",4]]],[11,"try_into","","",52,[[],["result",4]]],[11,"borrow","","",52,[[]]],[11,"borrow_mut","","",52,[[]]],[11,"type_id","","",52,[[],["typeid",3]]],[11,"from","","",53,[[]]],[11,"into","","",53,[[]]],[11,"into_iter","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"try_into","","",53,[[],["result",4]]],[11,"borrow","","",53,[[]]],[11,"borrow_mut","","",53,[[]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"into_iter","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",54,[[]]],[11,"into","","",54,[[]]],[11,"into_iter","","",54,[[]]],[11,"to_owned","","",54,[[]]],[11,"clone_into","","",54,[[]]],[11,"try_from","","",54,[[],["result",4]]],[11,"try_into","","",54,[[],["result",4]]],[11,"borrow","","",54,[[]]],[11,"borrow_mut","","",54,[[]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"from","","",55,[[]]],[11,"into","","",55,[[]]],[11,"into_iter","","",55,[[]]],[11,"to_owned","","",55,[[]]],[11,"clone_into","","",55,[[]]],[11,"try_from","","",55,[[],["result",4]]],[11,"try_into","","",55,[[],["result",4]]],[11,"borrow","","",55,[[]]],[11,"borrow_mut","","",55,[[]]],[11,"type_id","","",55,[[],["typeid",3]]],[11,"from","","",56,[[]]],[11,"into","","",56,[[]]],[11,"into_iter","","",56,[[]]],[11,"try_from","","",56,[[],["result",4]]],[11,"try_into","","",56,[[],["result",4]]],[11,"borrow","","",56,[[]]],[11,"borrow_mut","","",56,[[]]],[11,"type_id","","",56,[[],["typeid",3]]],[11,"from","","",57,[[]]],[11,"into","","",57,[[]]],[11,"into_iter","","",57,[[]]],[11,"to_owned","","",57,[[]]],[11,"clone_into","","",57,[[]]],[11,"try_from","","",57,[[],["result",4]]],[11,"try_into","","",57,[[],["result",4]]],[11,"borrow","","",57,[[]]],[11,"borrow_mut","","",57,[[]]],[11,"type_id","","",57,[[],["typeid",3]]],[11,"from","","",58,[[]]],[11,"into","","",58,[[]]],[11,"into_iter","","",58,[[]]],[11,"to_owned","","",58,[[]]],[11,"clone_into","","",58,[[]]],[11,"try_from","","",58,[[],["result",4]]],[11,"try_into","","",58,[[],["result",4]]],[11,"borrow","","",58,[[]]],[11,"borrow_mut","","",58,[[]]],[11,"type_id","","",58,[[],["typeid",3]]],[11,"from","","",59,[[]]],[11,"into","","",59,[[]]],[11,"into_iter","","",59,[[]]],[11,"to_owned","","",59,[[]]],[11,"clone_into","","",59,[[]]],[11,"try_from","","",59,[[],["result",4]]],[11,"try_into","","",59,[[],["result",4]]],[11,"borrow","","",59,[[]]],[11,"borrow_mut","","",59,[[]]],[11,"type_id","","",59,[[],["typeid",3]]],[11,"clone","itertools","",0,[[],["either",4]]],[11,"next_back","","",0,[[],["option",4]]],[11,"as_ref","","",0,[[]]],[11,"as_ref","","",0,[[]]],[11,"as_ref","","",0,[[]]],[11,"into","","",0,[[],["result",4]]],[11,"as_mut","","",0,[[]]],[11,"as_mut","","",0,[[]]],[11,"as_mut","","",0,[[]]],[11,"deref_mut","","",0,[[]]],[11,"fmt","","",0,[[["formatter",3]],[["result",4],["error",3]]]],[11,"eq","","",0,[[["either",4]]]],[11,"ne","","",0,[[["either",4]]]],[11,"cmp","","",0,[[["either",4]],["ordering",4]]],[11,"deref","","",0,[[]]],[11,"extend","","",0,[[]]],[11,"hash","","",0,[[]]],[11,"from","","",0,[[["result",4]],["either",4]]],[11,"partial_cmp","","",0,[[["either",4]],[["option",4],["ordering",4]]]],[11,"lt","","",0,[[["either",4]]]],[11,"le","","",0,[[["either",4]]]],[11,"gt","","",0,[[["either",4]]]],[11,"ge","","",0,[[["either",4]]]],[11,"next","","",0,[[],["option",4]]],[11,"size_hint","","",0,[[]]],[11,"fold","","",0,[[]]],[11,"count","","",0,[[]]],[11,"last","","",0,[[],["option",4]]],[11,"nth","","",0,[[],["option",4]]],[11,"collect","","",0,[[]]],[11,"all","","",0,[[]]],[11,"fmt","","",0,[[["formatter",3]],[["result",4],["error",3]]]],[11,"peeking_next","itertools::structs","",9,[[],["option",4]]],[11,"peeking_next","","",8,[[],["option",4]]],[11,"peeking_next","","",10,[[],["option",4]]],[11,"drop","","",39,[[]]],[11,"drop","","",36,[[]]],[11,"from","","",59,[[]]],[11,"from","","",59,[[]]],[11,"from","","",59,[[]]],[11,"from","","",59,[[]]],[11,"from","","",59,[[]]],[11,"from","","",59,[[]]],[11,"from","","",59,[[]]],[11,"from","","",59,[[]]],[11,"next_back","","",19,[[],["option",4]]],[11,"next_back","","",27,[[],["option",4]]],[11,"next_back","","",28,[[],["option",4]]],[11,"next_back","","",32,[[],["option",4]]],[11,"next_back","","",32,[[],["option",4]]],[11,"next_back","","",32,[[],["option",4]]],[11,"next_back","","",32,[[],["option",4]]],[11,"next_back","","",32,[[],["option",4]]],[11,"next_back","","",32,[[],["option",4]]],[11,"next_back","","",45,[[],["option",4]]],[11,"next_back","","",6,[[],["option",4]]],[11,"next_back","","",48,[[],["option",4]]],[11,"next_back","","",58,[[],["option",4]]],[11,"next","","",30,[[],["option",4]]],[11,"count","","",30,[[]]],[11,"size_hint","","",30,[[]]],[11,"last","","",30,[[],["option",4]]],[11,"next","","",15,[[],["option",4]]],[11,"size_hint","","",15,[[]]],[11,"next","","",16,[[],["option",4]]],[11,"size_hint","","",16,[[]]],[11,"next","","",8,[[],["option",4]]],[11,"size_hint","","",8,[[]]],[11,"all","","",8,[[]]],[11,"fold","","",8,[[]]],[11,"next","","",17,[[],["option",4]]],[11,"size_hint","","",17,[[]]],[11,"fold","","",17,[[]]],[11,"next","","",18,[[],["option",4]]],[11,"size_hint","","",18,[[]]],[11,"next","","",29,[[],["option",4]]],[11,"size_hint","","",29,[[]]],[11,"next","","",21,[[],["option",4]]],[11,"size_hint","","",21,[[]]],[11,"next","","",22,[[],["option",4]]],[11,"size_hint","","",22,[[]]],[11,"next","","",25,[[],["option",4]]],[11,"size_hint","","",25,[[]]],[11,"next","","",14,[[],["option",4]]],[11,"size_hint","","",14,[[]]],[11,"fold","","",14,[[]]],[11,"next","","",23,[[],["option",4]]],[11,"size_hint","","",23,[[]]],[11,"next","","",24,[[],["option",4]]],[11,"size_hint","","",24,[[]]],[11,"next","","",26,[[],["option",4]]],[11,"next","","",19,[[],["option",4]]],[11,"size_hint","","",19,[[]]],[11,"fold","","",19,[[]]],[11,"next","","",20,[[],["option",4]]],[11,"size_hint","","",20,[[]]],[11,"fold","","",20,[[]]],[11,"collect","","",20,[[]]],[11,"next","","",27,[[],["option",4]]],[11,"size_hint","","",27,[[]]],[11,"next","","",28,[[],["option",4]]],[11,"size_hint","","",28,[[]]],[11,"fold","","",28,[[]]],[11,"collect","","",28,[[]]],[11,"next","","",32,[[],["option",4]]],[11,"size_hint","","",32,[[]]],[11,"fold","","",32,[[]]],[11,"next","","",32,[[],["option",4]]],[11,"size_hint","","",32,[[]]],[11,"fold","","",32,[[]]],[11,"next","","",32,[[],["option",4]]],[11,"size_hint","","",32,[[]]],[11,"fold","","",32,[[]]],[11,"next","","",32,[[],["option",4]]],[11,"size_hint","","",32,[[]]],[11,"fold","","",32,[[]]],[11,"next","","",32,[[],["option",4]]],[11,"size_hint","","",32,[[]]],[11,"fold","","",32,[[]]],[11,"next","","",32,[[],["option",4]]],[11,"size_hint","","",32,[[]]],[11,"fold","","",32,[[]]],[11,"next","","",31,[[],["option",4]]],[11,"next","","",40,[[],["option",4]]],[11,"next","","",39,[[],["option",4]]],[11,"next","","",37,[[],["option",4]]],[11,"next","","",36,[[],["option",4]]],[11,"next","","",41,[[],["option",4]]],[11,"size_hint","","",41,[[]]],[11,"next","","",42,[[],["option",4]]],[11,"size_hint","","",42,[[]]],[11,"next","","",43,[[],["option",4]]],[11,"size_hint","","",43,[[]]],[11,"next","","",44,[[],["option",4]]],[11,"size_hint","","",44,[[]]],[11,"next","","",9,[[],["option",4]]],[11,"size_hint","","",9,[[]]],[11,"next","","",45,[[],["option",4]]],[11,"size_hint","","",45,[[]]],[11,"next","","",46,[[],["option",4]]],[11,"size_hint","","",46,[[]]],[11,"next","","",47,[[],["option",4]]],[11,"size_hint","","",47,[[]]],[11,"next","","",10,[[],["option",4]]],[11,"size_hint","","",10,[[]]],[11,"next","","",6,[[],["option",4]]],[11,"size_hint","","",6,[[]]],[11,"next","","",48,[[],["option",4]]],[11,"size_hint","","",48,[[]]],[11,"next","","",49,[[],["option",4]]],[11,"size_hint","","",49,[[]]],[11,"next","","",7,[[],["option",4]]],[11,"size_hint","","",7,[[]]],[11,"next","","",50,[[],["option",4]]],[11,"size_hint","","",50,[[]]],[11,"next","","",51,[[],["option",4]]],[11,"size_hint","","",51,[[]]],[11,"next","","",52,[[],["option",4]]],[11,"size_hint","","",52,[[]]],[11,"next","","",11,[[],["option",4]]],[11,"next","","",53,[[],["option",4]]],[11,"next","","",55,[[],["option",4]]],[11,"size_hint","","",55,[[]]],[11,"count","","",55,[[]]],[11,"next","","",54,[[],["option",4]]],[11,"size_hint","","",54,[[]]],[11,"count","","",54,[[]]],[11,"next","","",56,[[],["option",4]]],[11,"size_hint","","",56,[[]]],[11,"next","","",57,[[],["option",4]]],[11,"size_hint","","",57,[[]]],[11,"next","","",58,[[],["option",4]]],[11,"size_hint","","",58,[[]]],[11,"next","","",59,[[],["option",4]]],[11,"size_hint","","",59,[[]]],[11,"next","","",59,[[],["option",4]]],[11,"size_hint","","",59,[[]]],[11,"next","","",59,[[],["option",4]]],[11,"size_hint","","",59,[[]]],[11,"next","","",59,[[],["option",4]]],[11,"size_hint","","",59,[[]]],[11,"next","","",59,[[],["option",4]]],[11,"size_hint","","",59,[[]]],[11,"next","","",59,[[],["option",4]]],[11,"size_hint","","",59,[[]]],[11,"next","","",59,[[],["option",4]]],[11,"size_hint","","",59,[[]]],[11,"next","","",59,[[],["option",4]]],[11,"size_hint","","",59,[[]]],[11,"clone","","",30,[[],["multiproduct",3]]],[11,"clone","","",15,[[],["interleave",3]]],[11,"clone","","",16,[[],["interleaveshortest",3]]],[11,"clone","","",8,[[],["putback",3]]],[11,"clone","","",17,[[],["product",3]]],[11,"clone","","",18,[[],["batching",3]]],[11,"clone","","",29,[[],["step",3]]],[11,"clone","","",21,[[]]],[11,"clone","","",22,[[]]],[11,"clone","","",25,[[]]],[11,"clone","","",14,[[]]],[11,"clone","","",24,[[],["whilesome",3]]],[11,"clone","itertools","",4,[[],["eitherorboth",4]]],[11,"clone","itertools::structs","",32,[[]]],[11,"clone","","",33,[[],["format",3]]],[11,"clone","","",41,[[],["intersperse",3]]],[11,"clone","","",42,[[],["kmerge",3]]],[11,"clone","itertools","",2,[[],["minmaxresult",4]]],[11,"clone","itertools::structs","",9,[[],["multipeek",3]]],[11,"clone","","",45,[[],["padusing",3]]],[11,"clone","","",10,[[],["putbackn",3]]],[11,"clone","","",6,[[],["rciter",3]]],[11,"clone","","",7,[[],["unfold",3]]],[11,"clone","","",50,[[],["iterate",3]]],[11,"clone","","",55,[[],["uniqueby",3]]],[11,"clone","","",54,[[],["unique",3]]],[11,"clone","itertools","",3,[[],["position",4]]],[11,"clone","itertools::structs","",57,[[],["zipeq",3]]],[11,"clone","","",58,[[],["ziplongest",3]]],[11,"clone","","",59,[[],["zip",3]]],[11,"clone","itertools","",5,[[],["foldwhile",4]]],[11,"eq","","",4,[[["eitherorboth",4]]]],[11,"ne","","",4,[[["eitherorboth",4]]]],[11,"eq","","",2,[[["minmaxresult",4]]]],[11,"ne","","",2,[[["minmaxresult",4]]]],[11,"eq","","",3,[[["position",4]]]],[11,"ne","","",3,[[["position",4]]]],[11,"eq","","",5,[[["foldwhile",4]]]],[11,"ne","","",5,[[["foldwhile",4]]]],[11,"fmt","itertools::structs","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",29,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"fmt","","",22,[[["formatter",3]],["result",6]]],[11,"fmt","","",25,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",23,[[["formatter",3]],["result",6]]],[11,"fmt","","",24,[[["formatter",3]],["result",6]]],[11,"fmt","","",26,[[["formatter",3]],["result",6]]],[11,"fmt","itertools","",4,[[["formatter",3]],["result",6]]],[11,"fmt","itertools::structs","",32,[[["formatter",3]],["result",6]]],[11,"fmt","","",31,[[["formatter",3]],["result",6]]],[11,"fmt","","",33,[[["formatter",3]],["result",6]]],[11,"fmt","","",41,[[["formatter",3]],["result",6]]],[11,"fmt","","",42,[[["formatter",3]],["result",6]]],[11,"fmt","","",43,[[["formatter",3]],["result",6]]],[11,"fmt","","",44,[[["formatter",3]],["result",6]]],[11,"fmt","itertools","",2,[[["formatter",3]],["result",6]]],[11,"fmt","itertools::structs","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",47,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",48,[[["formatter",3]],["result",6]]],[11,"fmt","","",49,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",50,[[["formatter",3]],["result",6]]],[11,"fmt","","",51,[[["formatter",3]],["result",6]]],[11,"fmt","","",52,[[["formatter",3]],["result",6]]],[11,"fmt","","",53,[[["formatter",3]],["result",6]]],[11,"fmt","","",55,[[["formatter",3]],["result",6]]],[11,"fmt","","",54,[[["formatter",3]],["result",6]]],[11,"fmt","itertools","",3,[[["formatter",3]],["result",6]]],[11,"fmt","itertools::structs","",57,[[["formatter",3]],["result",6]]],[11,"fmt","","",58,[[["formatter",3]],["result",6]]],[11,"fmt","","",59,[[["formatter",3]],["result",6]]],[11,"fmt","itertools","",5,[[["formatter",3]],["result",6]]],[11,"fmt","itertools::structs","",34,[[["formatter",3]],["result",6]]],[11,"fmt","","",33,[[["formatter",3]],["result",6]]],[11,"fmt","","",33,[[["formatter",3]],["result",6]]],[11,"fmt","","",33,[[["formatter",3]],["result",6]]],[11,"fmt","","",33,[[["formatter",3]],["result",6]]],[11,"fmt","","",33,[[["formatter",3]],["result",6]]],[11,"fmt","","",33,[[["formatter",3]],["result",6]]],[11,"fmt","","",33,[[["formatter",3]],["result",6]]],[11,"fmt","","",33,[[["formatter",3]],["result",6]]],[11,"is_left","itertools","Return true if the value is the `Left` variant.",0,[[]]],[11,"is_right","","Return true if the value is the `Right` variant.",0,[[]]],[11,"left","","Convert the left side of `Either<L, R>` to an `Option<L>`.",0,[[],["option",4]]],[11,"right","","Convert the right side of `Either<L, R>` to an `Option<R>`.",0,[[],["option",4]]],[11,"as_ref","","Convert `&Either<L, R>` to `Either<&L, &R>`.",0,[[],["either",4]]],[11,"as_mut","","Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.",0,[[],["either",4]]],[11,"flip","","Convert `Either<L, R>` to `Either<R, L>`.",0,[[],["either",4]]],[11,"map_left","","Apply the function `f` on the value in the `Left` variant…",0,[[],["either",4]]],[11,"map_right","","Apply the function `f` on the value in the `Right` variant…",0,[[],["either",4]]],[11,"either","","Apply one of two functions depending on contents, unifying…",0,[[]]],[11,"either_with","","Like `either`, but provide some context to whichever of…",0,[[]]],[11,"left_and_then","","Apply the function `f` on the value in the `Left` variant…",0,[[],["either",4]]],[11,"right_and_then","","Apply the function `f` on the value in the `Right` variant…",0,[[],["either",4]]],[11,"into_iter","","Convert the inner value to an iterator.",0,[[],["either",4]]],[11,"left_or","","Return left value or given value",0,[[]]],[11,"left_or_default","","Return left or a default",0,[[]]],[11,"left_or_else","","Returns left value or computes it from a closure",0,[[]]],[11,"right_or","","Return right value or given value",0,[[]]],[11,"right_or_default","","Return right or a default",0,[[]]],[11,"right_or_else","","Returns right value or computes it from a closure",0,[[]]],[11,"factor_first","","Factor out a homogeneous type from an either of pairs.",0,[[]]],[11,"factor_second","","Factor out a homogeneous type from an either of pairs.",0,[[]]],[11,"into_inner","","Extract the value of an either over two equivalent types.",0,[[]]],[11,"map","","Map `f` over the contained value and return the result in…",0,[[],["either",4]]]],"p":[[4,"Either"],[4,"Diff"],[4,"MinMaxResult"],[4,"Position"],[4,"EitherOrBoth"],[4,"FoldWhile"],[3,"RcIter"],[3,"Unfold"],[3,"PutBack"],[3,"MultiPeek"],[3,"PutBackN"],[3,"Tuples"],[8,"PeekingNext"],[8,"Itertools"],[3,"Dedup"],[3,"Interleave"],[3,"InterleaveShortest"],[3,"Product"],[3,"Batching"],[3,"MapInto"],[3,"MapResults"],[3,"Merge"],[3,"MergeBy"],[3,"TakeWhileRef"],[3,"WhileSome"],[3,"Coalesce"],[3,"TupleCombinations"],[3,"Positions"],[3,"Update"],[3,"Step"],[3,"MultiProduct"],[3,"Combinations"],[3,"ConsTuples"],[3,"Format"],[3,"FormatWith"],[3,"IntoChunks"],[3,"Chunk"],[3,"Chunks"],[3,"GroupBy"],[3,"Group"],[3,"Groups"],[3,"Intersperse"],[3,"KMerge"],[3,"KMergeBy"],[3,"MergeJoinBy"],[3,"PadUsing"],[3,"PeekingTakeWhile"],[3,"ProcessResults"],[3,"RepeatN"],[3,"RepeatCall"],[3,"Iterate"],[3,"Tee"],[3,"TupleBuffer"],[3,"TupleWindows"],[3,"Unique"],[3,"UniqueBy"],[3,"WithPosition"],[3,"ZipEq"],[3,"ZipLongest"],[3,"Zip"]]},\
"toitoi":{"doc":"A riichi mahjong library.","i":[[0,"player","toitoi","",null,null],[3,"Player","toitoi::player","",null,null],[11,"draw","","",0,[[["tile",3]]]],[11,"discard","","",0,[[],["tile",3]]],[11,"call","","",0,[[["tile",3],["vec",3],["calltype",4]]]],[0,"score","toitoi","Hand scoring.",null,null],[3,"ScoreResult","toitoi::score","Represents the scoring results for a single hand…",null,null],[5,"score","","Scores all winning hand combinations.",null,[[["vec",3],["handcontext",3],["vec",3]],[["vec",3],["scoreresult",3]]]],[11,"pair","","",1,[[],[["vec",3],["tile",3]]]],[11,"melds","","",1,[[],[["vec",3],["vec",3]]]],[11,"remaining","","",1,[[],[["vec",3],["tile",3]]]],[11,"fu","","The hand\'s total fu.",1,[[]]],[11,"fu_reasons","","The reasons contributing to the hand\'s total fu.",1,[[],["vec",3]]],[11,"han","","The hand\'s total han.",1,[[]]],[11,"han_reasons","","The yaku or yakuman contributing to hand\'s total han.",1,[[],["vec",3]]],[11,"limit","","The hand\'s limit (or lack of).",1,[[],["limit",4]]],[11,"points","","The points based on dealer/nondealer and tsumo/ron.",1,[[],["points",4]]],[11,"points_total","","The total points received.",1,[[]]],[0,"tile","toitoi","Provides a tile type and associated functions.",null,null],[3,"Tile","toitoi::tile","TODO: docstrings",null,null],[5,"tile_from_string","","Converts a Tenhou-style string to a tile.",null,[[],["tile",3]]],[5,"tiles_from_string","","Converts a Tenhou-style string to a list of tiles.",null,[[],[["vec",3],["tile",3]]]],[11,"number","","",2,[[]]],[11,"is_man","","",2,[[]]],[11,"is_pin","","",2,[[]]],[11,"is_sou","","",2,[[]]],[11,"is_wind","","",2,[[]]],[11,"is_colour","","",2,[[]]],[11,"is_number","","",2,[[]]],[11,"is_honour","","",2,[[]]],[11,"is_terminal","","",2,[[]]],[11,"is_simple","","",2,[[]]],[0,"types","toitoi","Shared public types.",null,null],[3,"Call","toitoi::types","Represents a call.",null,null],[12,"ctype","","",3,null],[12,"tile","","",3,null],[3,"HandContext","","Stores contextual information needed to score a hand.",null,null],[12,"winning_tile","","",4,null],[12,"is_tsumo","","",4,null],[12,"round_wind","","",4,null],[12,"player_wind","","",4,null],[12,"is_riichi","","",4,null],[12,"is_double_riichi","","",4,null],[12,"is_ippatsu","","",4,null],[12,"is_haitei","","",4,null],[12,"is_houtei","","",4,null],[12,"is_rinshan","","",4,null],[12,"is_chankan","","",4,null],[12,"is_tenhou","","",4,null],[12,"is_chiihou","","",4,null],[12,"winning_meld","","",4,null],[12,"n_dora","","",4,null],[12,"n_akadora","","",4,null],[12,"n_uradora","","",4,null],[4,"CallType","","Represents a call type.",null,null],[13,"Chi","","",5,null],[13,"Pon","","",5,null],[13,"Minkan","","",5,null],[13,"Ankan","","",5,null],[13,"NoCall","","",5,null],[4,"FuReason","","Represents a fu reason.",null,null],[13,"Base","","",6,null],[13,"Chiitoitsu","","",6,null],[13,"ClosedRon","","",6,null],[13,"TsumoNoPinfu","","",6,null],[13,"OpenPinfu","","",6,null],[13,"YakuhaiPairColours","","",6,null],[13,"YakuhaiPairRoundWind","","",6,null],[13,"YakuhaiPairPlayerWind","","",6,null],[13,"OpenTripletHonours","","",6,null],[13,"OpenTripletTerminals","","",6,null],[13,"OpenTripletSimples","","",6,null],[13,"ClosedTripletHonours","","",6,null],[13,"ClosedTripletTerminals","","",6,null],[13,"ClosedTripletSimples","","",6,null],[13,"OpenQuadHonours","","",6,null],[13,"OpenQuadTerminals","","",6,null],[13,"OpenQuadSimples","","",6,null],[13,"ClosedQuadHonours","","",6,null],[13,"ClosedQuadTerminals","","",6,null],[13,"ClosedQuadSimples","","",6,null],[13,"Kanchan","","",6,null],[13,"Penchan","","",6,null],[13,"Tanki","","",6,null],[13,"RoundUp","","",6,null],[13,"NotWinning","","",6,null],[4,"HanReason","","Represents the union of yaku and yakuman.",null,null],[13,"Yaku","","",7,null],[13,"Yakuman","","",7,null],[4,"Yaku","","Represents yaku.",null,null],[13,"MenzenTsumo","","",8,null],[13,"Riichi","","",8,null],[13,"Ippatsu","","",8,null],[13,"Pinfu","","",8,null],[13,"Iipeikou","","",8,null],[13,"HaiteiRaoyue","","",8,null],[13,"HouteiRaoyui","","",8,null],[13,"RinshanKaihou","","",8,null],[13,"Chankan","","",8,null],[13,"Tanyao","","",8,null],[13,"Ton","","",8,null],[13,"Nan","","",8,null],[13,"Sha","","",8,null],[13,"Pei","","",8,null],[13,"Haku","","",8,null],[13,"Hatsu","","",8,null],[13,"Chun","","",8,null],[13,"DoubleRiichi","","",8,null],[13,"Chantaiyao","","",8,null],[13,"SanshokuDoujun","","",8,null],[13,"Sankantsu","","",8,null],[13,"Ittsu","","",8,null],[13,"Toitoi","","",8,null],[13,"Sanankou","","",8,null],[13,"SanshokuDoukou","","",8,null],[13,"Chiitoitsu","","",8,null],[13,"Honroutou","","",8,null],[13,"Shousangen","","",8,null],[13,"Ryanpeikou","","",8,null],[13,"Honitsu","","",8,null],[13,"JunchanTaiyao","","",8,null],[13,"Chinitsu","","",8,null],[13,"Dora","","",8,null],[13,"Akadora","","",8,null],[13,"Uradora","","",8,null],[4,"Yakuman","","Represents yakuman.",null,null],[13,"KazoeYakuman","","",9,null],[13,"KokushiMusou","","",9,null],[13,"Suuankou","","",9,null],[13,"Daisangen","","",9,null],[13,"Shousuushii","","",9,null],[13,"Daisuushii","","",9,null],[13,"Tsuuiisou","","",9,null],[13,"Chinroutou","","",9,null],[13,"Ryuuiisou","","",9,null],[13,"ChuurenPoutou","","",9,null],[13,"Suukantsu","","",9,null],[13,"Tenhou","","",9,null],[13,"Chiihou","","",9,null],[13,"NagashiMangan","","",9,null],[4,"Limit","","Represents a scoring limit.",null,null],[13,"NoLimit","","",10,null],[13,"Mangan","","",10,null],[13,"Haneman","","",10,null],[13,"Baiman","","",10,null],[13,"Sanbaiman","","",10,null],[13,"Yakuman","","",10,null],[4,"Points","","Represents an allocation of points.",null,null],[13,"NoPoints","","",11,null],[13,"TsumoAll","","For dealer tsumo: the same value is paid by each nondealer.",11,null],[13,"Tsumo","","For nondealer tsumo: the first value is paid by each…",11,null],[13,"Ron","","For ron: the single value is paid in full by the discarder.",11,null],[11,"new","","",3,[[["calltype",4]],["call",3]]],[11,"chi","","",3,[[["tile",3]],["call",3]]],[11,"pon","","",3,[[["tile",3]],["call",3]]],[11,"minkan","","",3,[[["tile",3]],["call",3]]],[11,"ankan","","",3,[[["tile",3]],["call",3]]],[11,"meld","","",3,[[],[["vec",3],["tile",3]]]],[11,"from","toitoi::player","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","toitoi::score","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","toitoi::tile","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","toitoi::types","",3,[[]]],[11,"into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"to_string","","",6,[[],["string",3]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"to_string","","",7,[[],["string",3]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_string","","",10,[[],["string",3]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"clone","toitoi::tile","",2,[[],["tile",3]]],[11,"clone","toitoi::types","",5,[[],["calltype",4]]],[11,"clone","","",6,[[],["fureason",4]]],[11,"clone","","",7,[[],["hanreason",4]]],[11,"clone","","",8,[[],["yaku",4]]],[11,"clone","","",9,[[],["yakuman",4]]],[11,"clone","","",4,[[],["handcontext",3]]],[11,"default","toitoi::player","",0,[[],["player",3]]],[11,"default","toitoi::tile","",2,[[],["tile",3]]],[11,"default","toitoi::types","",4,[[],["handcontext",3]]],[11,"cmp","toitoi::score","",1,[[["scoreresult",3]],["ordering",4]]],[11,"cmp","toitoi::tile","",2,[[["tile",3]],["ordering",4]]],[11,"cmp","toitoi::types","",6,[[["fureason",4]],["ordering",4]]],[11,"cmp","","",7,[[["hanreason",4]],["ordering",4]]],[11,"cmp","","",8,[[["yaku",4]],["ordering",4]]],[11,"cmp","","",9,[[["yakuman",4]],["ordering",4]]],[11,"cmp","","",4,[[["handcontext",3]],["ordering",4]]],[11,"eq","toitoi::score","",1,[[["scoreresult",3]]]],[11,"ne","","",1,[[["scoreresult",3]]]],[11,"eq","toitoi::tile","",2,[[["tile",3]]]],[11,"ne","","",2,[[["tile",3]]]],[11,"eq","toitoi::types","",3,[[["call",3]]]],[11,"ne","","",3,[[["call",3]]]],[11,"eq","","",5,[[["calltype",4]]]],[11,"eq","","",6,[[["fureason",4]]]],[11,"eq","","",7,[[["hanreason",4]]]],[11,"ne","","",7,[[["hanreason",4]]]],[11,"eq","","",8,[[["yaku",4]]]],[11,"eq","","",9,[[["yakuman",4]]]],[11,"eq","","",4,[[["handcontext",3]]]],[11,"ne","","",4,[[["handcontext",3]]]],[11,"eq","","",10,[[["limit",4]]]],[11,"eq","","",11,[[["points",4]]]],[11,"ne","","",11,[[["points",4]]]],[11,"partial_cmp","toitoi::score","",1,[[["scoreresult",3]],[["option",4],["ordering",4]]]],[11,"lt","","",1,[[["scoreresult",3]]]],[11,"le","","",1,[[["scoreresult",3]]]],[11,"gt","","",1,[[["scoreresult",3]]]],[11,"ge","","",1,[[["scoreresult",3]]]],[11,"partial_cmp","toitoi::tile","",2,[[["tile",3]],[["option",4],["ordering",4]]]],[11,"lt","","",2,[[["tile",3]]]],[11,"le","","",2,[[["tile",3]]]],[11,"gt","","",2,[[["tile",3]]]],[11,"ge","","",2,[[["tile",3]]]],[11,"partial_cmp","toitoi::types","",6,[[["fureason",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",7,[[["hanreason",4]],[["option",4],["ordering",4]]]],[11,"lt","","",7,[[["hanreason",4]]]],[11,"le","","",7,[[["hanreason",4]]]],[11,"gt","","",7,[[["hanreason",4]]]],[11,"ge","","",7,[[["hanreason",4]]]],[11,"partial_cmp","","",8,[[["yaku",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",9,[[["yakuman",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",4,[[["handcontext",3]],[["option",4],["ordering",4]]]],[11,"lt","","",4,[[["handcontext",3]]]],[11,"le","","",4,[[["handcontext",3]]]],[11,"gt","","",4,[[["handcontext",3]]]],[11,"ge","","",4,[[["handcontext",3]]]],[11,"fmt","toitoi::score","",1,[[["formatter",3]],["result",6]]],[11,"fmt","toitoi::tile","",2,[[["formatter",3]],["result",6]]],[11,"fmt","toitoi::types","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","toitoi::tile","",2,[[["formatter",3]],["result",6]]],[11,"fmt","toitoi::types","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"hash","toitoi::tile","",2,[[]]],[11,"hash","toitoi::types","",6,[[]]]],"p":[[3,"Player"],[3,"ScoreResult"],[3,"Tile"],[3,"Call"],[3,"HandContext"],[4,"CallType"],[4,"FuReason"],[4,"HanReason"],[4,"Yaku"],[4,"Yakuman"],[4,"Limit"],[4,"Points"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);